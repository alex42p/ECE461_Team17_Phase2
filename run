#!/usr/bin/env python3
import sys
from pathlib import Path

# add src/ to sys.path so cli_project can be imported
# sys.path.insert(0, str(Path(__file__).resolve().parent / "src"))
ROOT = Path(__file__).resolve().parent
SRC = ROOT / "src"
if SRC.exists():
    sys.path.insert(0, str(SRC))
else:
    sys.path.insert(0, str(ROOT / "cli_project"))

# from cli_project import cli
import subprocess

def install() -> None:
    """Implements ./run install"""

    py = sys.executable
    cmds = [
        [py, "-m", "pip", "install", "--upgrade", "pip", "wheel"],
        [py, "-m", "pip", "install", "-r", "requirements.txt"],
    ]
    for cmd in cmds:
        rc = subprocess.call(cmd)
        if rc != 0:
            sys.stderr.write(f"Command failed: {' '.join(cmd)} (exit {rc})\n")
            # log.error(f"Command failed: {' '.join(cmd)} (exit {rc})\n")
            sys.exit(rc)
    # log.info("requiremetns installed successfully")
    sys.exit(0)

def usage() -> None:
    print("""Usage: ./run [install|test|URL_FILE]

Commands:
  install     Install dependencies from requirements.txt
  test        Run the test suite
  URL_FILE    Run scoring pipeline on the given URL file
  -h, --help  Show this help message
""")


def main() -> None:
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    arg = sys.argv[1]

    if arg in ("-h", "--help"):
        usage()
        sys.exit(0)
    elif arg == "install":
        install()
    elif arg == "test":
        from cli_project import cli
        cli.test()
    else:
        from cli_project import cli
        cli.score(arg)

if __name__ == "__main__":
    main()
